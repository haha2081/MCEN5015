#include <signal.h>
#include "libpixyusb2.h"

Pixy2 pixy;
static bool run_flag = true;

void handle_SIGINT(int unused) {
  // On CTRL+C - abort! //
  run_flag = false;
}

void processBlockData(const Block &block, int index) {
    // Process each block's data here
    // Example: Print the block's coordinates
    if(block_m.x > 315/2){
        printf('L')

    }

    else{printf('R')}

    
}

void get_blocks() {
  int Block_Index;

  // Query Pixy for blocks //
  pixy.ccc.getBlocks();

  // Were blocks detected? //
  if (pixy.ccc.numBlocks) {
    // Blocks detected - process them //

    for (Block_Index = 0; Block_Index < pixy.ccc.numBlocks; ++Block_Index) {
      processBlockData(pixy.ccc.blocks[Block_Index], Block_Index + 1);
    }
  }
}

int main() {
  int Result;

  // Catch CTRL+C (SIGINT) signals //
  signal(SIGINT, handle_SIGINT);

  printf("Connecting to Pixy2...");

  // Initialize Pixy2 Connection //
  {
    Result = pixy.init();
    if (Result < 0) {
      printf("Error\n");
      printf("pixy.init() returned %d\n", Result);
      return Result;
    }

    printf("Success\n");
  }

  // Get Pixy2 Version information //
  {
    Result = pixy.getVersion();
    if (Result < 0) {
      printf("pixy.getVersion() returned %d\n", Result);
      return Result;
    }

    pixy.version->print();
  }

  // Set Pixy2 to color connected components program //
  pixy.changeProg("color_connected_components");

  while (1) {
    get_blocks();

    if (run_flag == false) {
      // Exit program loop //
      break;
    }
  }

  printf("PIXY2 Get Blocks Demo Exit\n");
}
